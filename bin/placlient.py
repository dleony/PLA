#!/usr/bin/python
# - *- coding: UTF-8 -*-#
#
# Author: Derick Leony (dleony@it.uc3m.es)
# Author: Abelardo Pardo (abelardo.pardo@uc3m.es)
#
import os, sys, getopt, locale, pysvn, subprocess, imp
import datetime, shutil
import ConfigParser

# Fix the output encoding when redirecting stdout
if sys.stdout.encoding is None:
    (lang, enc) = locale.getdefaultlocale()
    if enc is not None:
        (e, d, sr, sw) = codecs.lookup(enc)
        # sw will encode Unicode data to the locale-specific character set.
        sys.stdout = sw(sys.stdout)

# Import the Adagio package
_dirName = os.path.dirname(__file__)
_dirName = os.path.abspath(os.path.join(_dirName, '..'))
sys.path.insert(0, _dirName)
sys.path.insert(0, os.path.join(_dirName, 'pla'))

import pla
import pla.bash
import pla.last
import pla.iwatch
import pla.firefox

# Load the modules with names without the .py extension
PLAGcc = imp.load_source('PLAGcc', os.path.join(pla.plaDirectory, 'bin', \
                                                    'gcc'))
PLAGdb = imp.load_source('PLAGdb', os.path.join(pla.plaDirectory, 'bin', \
                                                    'gdb'))
PLAKate = imp.load_source('PLAKate', os.path.join(pla.plaDirectory, 'bin', \
                                                      'kate'))
PLAKdevelop = imp.load_source('PLAKdevelop', \
                                  os.path.join(pla.plaDirectory, 'bin', \
                                                   'kdevelop'))
PLAValgrind = imp.load_source('PLAValgrind', \
                                  os.path.join(pla.plaDirectory, 'bin', \
                                                   'valgrind'))
PLAJavac = imp.load_source('PLAJavac', os.path.join(pla.plaDirectory, 'bin', \
                                                    'javac'))
PLAArgouml = imp.load_source('PLAArgouml', os.path.join(pla.plaDirectory, 'bin', \
                                                    'argouml'))
PLAWebratio = imp.load_source('PLAWebratio', os.path.join(pla.plaDirectory, 'bin', \
                                                    'webratio'))
def ssl_server_trust_prompt(trust_dict):
    return True, 1, True

def get_login(realm, username, may_save):
    config = ConfigParser.ConfigParser()
    config.read(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'conf', 'pla-client.cfg')))

    user = config.get('client', 'user')
    pawd = config.get('client', 'pass')
    return True, user, pawd, True

def validate_recording():
    # 1. if we havent approached the recording date, do nothing
    # 2. if the end date has passed, only remove the user if created
    # 3. if we are in the recording stage, check that the user has been created

    config = ConfigParser.ConfigParser()
    config.read(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'conf', 'pla-client.cfg')))

    ini_date = datetime.datetime.strptime(config.get('client', 'ini_date'), '%Y-%m-%d').date()
    end_date = datetime.datetime.strptime(config.get('client', 'end_date'), '%Y-%m-%d').date()

    if (datetime.date.today() < ini_date):
        # recording hasn't started
        sys.exit(0)

    if (datetime.date.today() > end_date):
        #recording has finished
        if (os.path.exists(os.path.expanduser('~/.plaworkspace'))):
            user = config.get('client', 'user')
            pawd = config.get('client', 'pass')
            pla.client.removeUser([user, pawd])
            shutil.rmtree(os.path.expanduser('~/.plaworkspace'));

        sys.exit(0)

    if (not os.path.exists(os.path.expanduser('~/.plaworkspace'))):
        group = config.get('client', 'group')
        token = config.get('client', 'token')
        pla.client.requestUser([group, token])        


def main():
    """
    Application to be run each 5 minutes, it gathers information about
    a set of events, compress the files and send them as a commit
    operation.
    """

    validate_recording()

    pla.logMessage("placlient: plaDirectory = " + pla.plaDirectory)

    # Fetch the svn client
    svnClient = pysvn.Client()
    svnClient.exception_style = 1
    svnClient.callback_get_login = get_login
    svnClient.callback_ssl_server_trust_prompt = ssl_server_trust_prompt

    # See if there is a .pladata file, if not, terminate
    svnPLADirectory = pla.findPLASVNDataDir(svnClient, os.path.expanduser('~/.plaworkspace'))
    if svnPLADirectory == None:
        pla.logMessage("placlient: No dir .pladata in SVN")
        sys.exit(1)

    # First, we send the data of the user through a commit.
    # Afterwards, we obtain the last changes in their updates repository.
    svnSendEvents(svnClient, svnPLADirectory)
    svnUpdateFiles(svnPLADirectory)

    # And terminate gracefully with the status generated by the original SVN
    sys.exit(0)

def svnSendEvents(svnClient, svnPLADirectory):
    # 1) Gather information depending on the tool and place it in the proper
    # location
    # 2) Create a TGZ with all the files
    # 3) Add the file to SVN
    # 4) Commit the new file to SVN
    dataFiles = []
    tarFileName = pla.getUniqueFileName()

    ############################################################
    #
    # INSTRUMENTATION
    #
    ############################################################

    ############################################################
    # Bash instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(pla.bash.dataDir, 
                                             pla.bash.dataFile, 
                                             'bash',
                                             tarFileName))

    ############################################################
    # Last instrumentation
    ############################################################
    dataFiles.extend(pla.last.prepareDataFile(tarFileName))

    ############################################################
    # GCC instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(PLAGcc.dataDir,
                                              PLAGcc.dataFile,
                                              'gcc',
                                              tarFileName))

    ############################################################
    # GDB instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(PLAGdb.dataDir,
                                              PLAGdb.dataFile,
                                              'gdb',
                                              tarFileName))

    ############################################################
    # Valgrind instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(PLAValgrind.dataDir,
                                              PLAValgrind.dataFile,
                                              'valgrind',
                                              tarFileName))

    ############################################################
    # Kdevelop instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(PLAKdevelop.dataDir,
                                              PLAKdevelop.dataFile,
                                              'kdevelop',
                                              tarFileName))


    ############################################################
    # Kate instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(PLAKate.dataDir,
                                              PLAKate.dataFile,
                                              'kate',
                                              tarFileName))

    ############################################################
    # iWatch instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(pla.iwatch.dataDir, 
                                             pla.iwatch.dataFile, 
                                             'iwatch',
                                             tarFileName))

    ############################################################
    # Firefox instrumentation
    ############################################################
    dataFiles.extend(pla.firefox.prepareDataFile(tarFileName))

    ############################################################
    # Javac instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(PLAJavac.dataDir,
                                              PLAJavac.dataFile,
                                              'javac',
                                              tarFileName))

    ############################################################
    # ArgoUML instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(PLAArgouml.dataDir,
                                              PLAArgouml.dataFile,
                                              'argouml',
                                              tarFileName))

    ############################################################
    # WebRatio instrumentation
    ############################################################
    dataFiles.extend(pla.prepareDataFile(PLAWebratio.dataDir,
                                              PLAWebratio.dataFile,
                                              'webratio',
                                              tarFileName))

    ############################################################
    pla.logMessage('placlient: Data files = ' + str(dataFiles))

    # If empty list of data files, terminate
    if dataFiles == []:
        pla.logMessage("placlient: empty tar file")
        return

    # TGZ all the data files
    tarFile = os.path.join(svnPLADirectory, tarFileName + '.tgz')
    pla.createTarFile(dataFiles, tarFile)

    ############################################################
    #
    # REMOVE TEMPORARY FILES
    #
    ############################################################
    pla.removeTemporaryData(pla.bash.dataDir,
                                 pla.bash.dataFile,
                                 'bash',
                                 tarFileName)
    pla.removeTemporaryData(pla.last.dataDir,
                                 pla.last.dataFile,
                                 'last',
                                 tarFileName)
    pla.removeTemporaryData(PLAGcc.dataDir,
                                 PLAGcc.dataFile,
                                 'gcc',
                                 tarFileName)
    pla.removeTemporaryData(PLAGdb.dataDir,
                                 PLAGdb.dataFile,
                                 'gdb',
                                 tarFileName)
    pla.removeTemporaryData(PLAValgrind.dataDir,
                                 PLAValgrind.dataFile,
                                 'valgrind',
                                 tarFileName)
    pla.removeTemporaryData(PLAKdevelop.dataDir,
                                 PLAKdevelop.dataFile,
                                 'kdevelop',
                                 tarFileName)
    pla.removeTemporaryData(PLAKate.dataDir,
                                 PLAKate.dataFile,
                                 'kate',
                                 tarFileName)
    pla.removeTemporaryData(pla.iwatch.dataDir,
                                 pla.iwatch.dataFile,
                                 'iwatch',
                                 tarFileName)
    pla.removeTemporaryData(pla.firefox.dataDir,
                                 pla.firefox.dataFile,
                                 'firefox',
                                 tarFileName)
    try:
        pla.logMessage("placlient: update " + svnPLADirectory)
        svnClient.update(svnPLADirectory)
    except pysvn.ClientError, e:
        # Exception when updating, not much we can do, log a message if in
        # debug, and terminate.
        pla.dumpException(e)
        # Remove tar file, will not be used
        os.remove(tarFile)
        return    

    # Add the tar file to subversion
    try:
        pla.logMessage("placlient: add " + tarFile)
        svnClient.add(tarFile)
    except pysvn.ClientError, e:
        # Remove tar file, will not be used
        os.remove(tarFile)
        pla.dumpException(e)

    # If the "add" operation has been successfull, we may assume that the data
    # will eventually reach the server. The following commit could fail, but the
    # files are already under subversion. As a consequence, update the
    # footprint.
    pla.setLastExecutionTStamp()

    # TO BE DONE: Walk over the svnPLADirectory and find files that are NOT
    # under version control. It might be due to previous SVN command failures.

    # COMMIT: Final commit of the data directory. If there is a problem, 
    try:
        pla.logMessage("placlient: commit " + tarFile)
        svnClient.checkin(tarFile, 'PLA Automatic commit')
    except pysvn.ClientError, e:
        pla.dumpException(e)

    ############################################################
    #
    # Reset data sources (if needed)
    #
    ############################################################

    ############################################################
    # Bash reset
    ############################################################
    pla.resetData(pla.bash.dataDir, pla.bash.dataFile, 'bash')

    ############################################################
    # Last reset
    ############################################################
    # Not needed because data is sent entirely each time

    ############################################################
    # GCC reset
    ############################################################
    pla.resetData(PLAGcc.dataDir, PLAGcc.dataFile, 'gcc')

    ############################################################
    # GDB reset
    ############################################################
    pla.resetData(PLAGdb.dataDir, PLAGdb.dataFile, 'gdb')

    ############################################################
    # Valgrind reset
    ############################################################
    pla.resetData(PLAValgrind.dataDir, PLAValgrind.dataFile, 'valgrind')

    ############################################################
    # Kdevelop reset
    ############################################################
    pla.resetData(PLAKdevelop.dataDir, PLAKdevelop.dataFile, 'kdevelop')

    ############################################################
    # Kate reset
    ############################################################
    pla.resetData(PLAKate.dataDir, PLAKate.dataFile, 'kate')

    ############################################################
    # iWatch reset
    ############################################################
    pla.resetData(pla.iwatch.dataDir, pla.iwatch.dataFile, 'iwatch')

    ############################################################
    # Firefox reset
    ############################################################
    # Not needed, because the tmp file has been deleted before and the data file
    # is already taken care of
    return

def svnUpdateFiles(svnPLADirectory):
    """
    Code to execute after an update operation has been detected. 

    The SVN repository uses '.pladata' to store the events observed for the
    different tools in *.tgz files. At this level, the folder 'feedback' is
    used to store the resources made available to the user. 

    The task to perform is to synchronize the content of this folder with a
    fixed folder in the user account after the update is executed.

    ~/.pladata/feedback

    Additionally and as a measure to allow changes in the tool WHILE the users
    are being monitored, the folder 'bin' is also synchronized.
    """

    # Perform the synchronization for the feedback, skip the svn admin folders
    try:
        pla.synchronizeFolders(os.path.join(svnPLADirectory, 'feedback'), 
                                    os.path.join(pla.plaDirectory, 'feedback'), 
                                    exclude = ['.*/\.svn/?.*'])
    except e:
        pla.dumpException(e)

    # Perform the synchronization for the bin, skip the svn admin folders
    try:
        pla.synchronizeFolders(os.path.join(svnPLADirectory, 'bin'), 
                                    os.path.join(pla.plaDirectory, 'bin'), 
                                    exclude = ['.*/\.svn/?.*'])
    except e:
        pla.dumpException(e)


if __name__ == "__main__":
    main()
