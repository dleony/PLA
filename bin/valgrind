#!/usr/bin/python
# -*- coding: UTF-8 -*-#
#
# Author: Abelardo Pardo (abelardo.pardo@uc3m.es)
#
import os, sys, subprocess, datetime

# Fix the output encoding when redirecting stdout
if sys.stdout.encoding is None:
    (lang, enc) = locale.getdefaultlocale()
    if enc is not None:
        (e, d, sr, sw) = codecs.lookup(enc)
        # sw will encode Unicode data to the locale-specific character set.
        sys.stdout = sw(sys.stdout)

# Import the Adagio package
_dirName = os.path.dirname(__file__)
_dirName = os.path.abspath(os.path.join(_dirName, '..'))
sys.path.insert(0, _dirName)
sys.path.insert(0, os.path.join(_dirName, 'pla'))

import pla

dataDir = os.path.join(pla.plaDirectory, 'tools', 'valgrind')
dataFile = os.path.join(dataDir, 'valgrind')

def main(): 
    """
    Application to wrap the execution of valgrind. Executes the program catching
    stderr and duplicating its content to stderr and to the log file. 
    """
    
    global dataDir
    global dataFile

    pla.logMessage('valgrind: preparing ' + dataFile)


    # Modify the first argument to point to the true executable
    sys.argv[0] = '--error-exitcode=1'
    sys.argv.insert(0, '/usr/bin/valgrind')

    # sys.exit(pla.executeAndLogExecution(dataDir, dataFile, 'valgrind'))

    # Execute the given command normally

    prefix = 'valgrind'
    dateBegin = str(datetime.datetime.now())[:-7]
    try:
        pla.logMessage(prefix + ': executing ' + str(sys.argv))
        givenCmd = subprocess.Popen(sys.argv, stderr = subprocess.PIPE)
    except OSError, e:		  
        print 'File not found (PLA)'
        sys.exit(0)
    except ValueError, e:
        print 'Incorrect arguments (PLA)'
        sys.exit(0)
        
    # If no file is present in pladirectory, no instrumentation
    doLogging = os.path.exists(dataDir)
    if doLogging:
        dataOut = open(dataFile, 'a')

        # Dump a mark status and time/date
        dataOut.write('-BEGIN ' \
                          + dateBegin + ' ' \
                          + str(datetime.datetime.now())[:-7] + ' ' \
                          + ' '.join(map(lambda x: '\'' + x + '\'', sys.argv)) \
                          + '\n')
    else:
        pla.logMessage(prefix + ': Disabled. Skipping')

    # Loop until the end of stderr of the given command
    for line in givenCmd.stderr:
        sys.stderr.write(line)
        # If logging is enable do it
        if doLogging:
            dataOut.write(line)
        
    givenCmd.wait()
    # Store the return status to return when the script finishes.
    originalStatus = givenCmd.returncode
    pla.logMessage(prefix + ': command status = ' + str(originalStatus))

    if doLogging:
        dataOut.write('-END ' + str(originalStatus) + '\n')
        dataOut.close()

    sys.exit(originalStatus)
    
if __name__ == "__main__":
    main()
