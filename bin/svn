#!/usr/bin/python
# -*- coding: UTF-8 -*-#
#
# Author: Abelardo Pardo (abelardo.pardo@uc3m.es)
#
import os, sys, getopt, locale, pysvn, subprocess, imp

import PLABash, PLABasic

# Load the modules with names without the .py extension
PLAGcc = imp.load_source('PLAGcc', os.path.join(PLABasic.plaDirectory, 'bin', \
                                                    'gcc'))
PLAGdb = imp.load_source('PLAGdb', os.path.join(PLABasic.plaDirectory, 'bin', \
                                                    'gdb'))
PLAKate = imp.load_source('PLAKate', os.path.join(PLABasic.plaDirectory, 'bin', \
                                                      'kate'))
PLAKdevelop = imp.load_source('PLAKdevelop', \
                                  os.path.join(PLABasic.plaDirectory, 'bin', \
                                                   'kdevelop'))
PLAValgrind = imp.load_source('PLAValgrind', \
                                  os.path.join(PLABasic.plaDirectory, 'bin', \
                                                   'valgrind'))

def main():
    """
    Application to take a svn command, execute it regularly and then gather
    information about a set of events, compress the files and send them also as
    a commit operation.
    """

    PLABasic.logMessage("svn: plaDirectory = " + PLABasic.plaDirectory)

    # Modify the first argument to point to the true executable
    sys.argv[0] = '/usr/bin/svn'

    # Execute the given SVN command regularly
    try:
        PLABasic.logMessage('svn: executing ' + str(sys.argv))
        givenCmd = subprocess.Popen(sys.argv)
    except OSError, e:
        print 'File not found (PLA)'
        sys.exit(0)
    except ValueError, e:
        print 'Incorrect arguments (PLA)'
        sys.exit(0)
        
    # Wait for the process to terminate
    givenCmd.wait()

    # Store the return status to return when the script finishes.
    originalStatus = givenCmd.returncode
    PLABasic.logMessage('svn: command status = ' + str(originalStatus))

    # TO BE DONE: How to detect that the command went OK. If a commit failed it
    # might be due to network problems, so the additional commit should not be
    # executed.
    
    # If the command is NOT a commit, we are done
    if not 'commit' in sys.argv:
        PLABasic.logMessage('svn: not a commit. Done')
        sys.exit(originalStatus)

    # See if there is a .pladata file, if not, terminate
    svnPLADirectory = PLABasic.findPLASVNDataDir(os.getcwd())
    if svnPLADirectory == None:
        PLABasic.logMessage("svn: No dir .pladata in SVN")
        sys.exit(originalStatus)

    # 1) Gather information depending on the tool and place it in the proper
    # location
    # 2) Create a TGZ with all the files
    # 3) Add the file to SVN
    # 4) Commit the new file to SVN
    dataFiles = []
    tarFileName = PLABasic.getUniqueFileName()

    ############################################################
    #
    # INSTRUMENTATION
    #
    ############################################################

    ############################################################
    # Bash instrumentation
    ############################################################
    dataFiles.extend(PLABasic.prepareDataFile(PLABash.dataDir, 
                                              PLABash.dataFile, 
                                              'bash',
                                              tarFileName))

    ############################################################
    # GCC instrumentation
    ############################################################
    dataFiles.extend(PLABasic.prepareDataFile(PLAGcc.dataDir,
                                              PLAGcc.dataFile,
                                              'gcc',
                                              tarFileName))

    ############################################################
    # GDB instrumentation
    ############################################################
    dataFiles.extend(PLABasic.prepareDataFile(PLAGdb.dataDir,
                                              PLAGdb.dataFile,
                                              'gdb',
                                              tarFileName))

    ############################################################
    # Valgrind instrumentation
    ############################################################
    dataFiles.extend(PLABasic.prepareDataFile(PLAValgrind.dataDir,
                                              PLAValgrind.dataFile,
                                              'valgrind',
                                              tarFileName))

    ############################################################
    # Kdevelop instrumentation
    ############################################################
    dataFiles.extend(PLABasic.prepareDataFile(PLAKdevelop.dataDir,
                                              PLAKdevelop.dataFile,
                                              'kdevelop',
                                              tarFileName))


    ############################################################
    # Kate instrumentation
    ############################################################
    dataFiles.extend(PLABasic.prepareDataFile(PLAKate.dataDir,
                                              PLAKate.dataFile,
                                              'kate',
                                              tarFileName))

    ############################################################
    # iWatch instrumentation
    ############################################################

    ############################################################
    # Firefox instrumentation
    ############################################################

    ############################################################
    PLABasic.logMessage('svn: Data files = ' + str(dataFiles))

    # If empty list of data files, terminate
    if dataFiles == []:
        PLABasic.logMessage("svn: empty tar file")
        sys.exit(originalStatus)

    # TGZ all the data files
    tarFile = os.path.join(svnPLADirectory, tarFileName + '.tgz')
    PLABasic.createTarFile(dataFiles, tarFile)

    # Fetch the svn client
    svnClient = pysvn.Client()
    svnClient.exception_style = 1

    try:
        PLABasic.logMessage("svn: update " + svnPLADirectory)
        svnClient.update(svnPLADirectory)
    except pysvn.ClientError, e:
        # Exception when updating, not much we can do, log a message if in
        # debug, and terminate.
        PLABasic.dumpException(e)
        sys.exit(originalStatus)
    

    # ADD: For each of the newly created files add it to subversion
    try:
        PLABasic.logMessage("svn: add " + tarFile)
        svnClient.add(tarFile)
    except pysvn.ClientError, e:
        PLABasic.dumpException(e)

    # TO BE DONE: Walk over the svnPLADirectory and find files that are NOT
    # under version control. It might be due to previous SVN command failures.

    # COMMIT: Final commit of the data directory
    try:
        PLABasic.logMessage("svn: commit " + tarFile)
        svnClient.checkin(tarFile, 'PLA Automatic commit')
    except pysvn.ClientError, e:
        PLABasic.dumpException(e)
        
    ############################################################
    #
    # Reset data sources (if needed)
    #
    ############################################################

    ############################################################
    # Bash reset
    ############################################################
    PLABasic.resetData(PLABash.dataDir, PLABash.dataFile, 'bash', tarFileName)

    ############################################################
    # GCC reset
    ############################################################
    PLABasic.resetData(PLAGcc.dataDir, PLAGcc.dataFile, 'gcc', tarFileName)

    ############################################################
    # GDB reset
    ############################################################
    PLABasic.resetData(PLAGdb.dataDir, PLAGdb.dataFile, 'gdb', tarFileName)

    ############################################################
    # Valgrind reset
    ############################################################
    PLABasic.resetData(PLAValgrind.dataDir, PLAValgrind.dataFile, 'valgrind', \
                           tarFileName)

    ############################################################
    # Kdevelop reset
    ############################################################
    PLABasic.resetData(PLAGdb.dataDir, PLAGdb.dataFile, 'kdevelop', tarFileName)

    ############################################################
    # Kate reset
    ############################################################
    PLABasic.resetData(PLAGdb.dataDir, PLAGdb.dataFile, 'kate', tarFileName)

    ############################################################
    # iWatch reset
    ############################################################

    ############################################################
    # Firefox reset
    ############################################################

    # And terminate gracefully with the status generated by the original SVN
    sys.exit(originalStatus)
        
if __name__ == "__main__":
    main()
