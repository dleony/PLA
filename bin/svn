#!/usr/bin/python
# -*- coding: UTF-8 -*-#
#
# Author: Abelardo Pardo (abelardo.pardo@uc3m.es)
#
import os, glob, sys, re, logging, getopt, locale, pysvn, subprocess

import PLABash, PLABasic

def main():
    """
    Application to take a svn command, execute it regularly and then gather
    information about a set of events, compress the files and send them also as
    a commit operation.
    """

# Remaining issues:
#
# * To log or not to log, that is the question

    # Set the logging format
    # logging.basicConfig(level=logging.INFO,
    #                    format='%(asctime)s %(levelname)s %(message)s')

    # Obtain the PLA directory from the command
    PLABasic.plaDirectory = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), \
                                                    '..'))

    PLABasic.logMessage("plaDirectory = " + PLABasic.plaDirectory)

    # Modify the first argument to point to the true executable
    sys.argv[0] = '/usr/bin/svn'

    # Execute the given SVN command regularly
    try:
        givenCmd = subprocess.Popen(sys.argv)
        givenCmd.wait()
    except OSError, e:
        print 'File not found (PLA)'
        sys.exit(0)
    except ValueError, e:
        print 'Incorrect arguments (PLA)'
        sys.exit(0)
        
    (svnOutput, svnError) = givenCmd.communicate()

    # Dump output and error if not None
    if svnOutput != None:
        print svnOutput

    if svnError != None:
        print svnError

    # If the command is NOT a commit, we are done
    if not 'commit' in sys.argv:
        sys.exit(originalStatus)

    # Original command is execute, store the return status to return when the
    # script finishes.
    originalStatus = givenCmd.returncode

    # See if there is a .pladata file, if not, terminate

    svnPLADirectory = PLABasic.findPLASVNDataDir(os.getcwd())
    if svnPLADirectory == None:
        PLABasic.logMessage("No dir .pladata in SVN")
        sys.exit(originalStatus)

    # 1) Gather information depending on the tool and place it in the proper
    # location (gzipped)
    # 2) Add file 
    # 3) Commit
    createdFiles = []

    # Bash instrumentation
    createdFiles.extend(PLABash.instrument(PLABasic.plaDirectory, 
                                           svnPLADirectory))

    PLABasic.logMessage('Created files = ' + str(createdFiles))

    # Add()

    # Commit()
    # Fetch the svn client
    svnClient = pysvn.Client()
    svnClient.exception_style = 1

    try:
        svnClient.update(svnPLADirectory)
    except pysvn.ClientError, e:
        # Exception when updating, not much we can do, log a message if in
        # debug, and terminate.
        PLABasic.dumpException(e)
        sys.exit(originalStatus)
    

    for fileName in createdFiles:
        try:
            svnClient.add(fileName)
        except pysvn.ClientError, e:
            PLABasic.dumpException(e)

    # Final commit 
    try:
        svnClient.checkin(svnPLADirectory, 'PLA Automatic commit')
    except pysvn.ClientError, e:
        PLABasic.dumpException(e)
        

    # And terminate gracefully with the status generated by the original SVN
    sys.exit(originalStatus)
        
if __name__ == "__main__":
    main()
