#!/usr/bin/python
# -*- coding: UTF-8 -*-#
#
# Author: Abelardo Pardo (abelardo.pardo@uc3m.es)
#
import os, sys, subprocess, datetime

# Fix the output encoding when redirecting stdout
if sys.stdout.encoding is None:
    (lang, enc) = locale.getdefaultlocale()
    if enc is not None:
        (e, d, sr, sw) = codecs.lookup(enc)
        # sw will encode Unicode data to the locale-specific character set.
        sys.stdout = sw(sys.stdout)

# Import the Adagio package
_dirName = os.path.dirname(__file__)
_dirName = os.path.abspath(os.path.join(_dirName, '..'))
sys.path.insert(0, _dirName)
sys.path.insert(0, os.path.join(_dirName, 'pla'))

import pla

dataDir = os.path.join(pla.plaDirectory, 'tools', 'gdb')
dataFile = os.path.join(dataDir, 'gdb')
gdbHistoryFile = os.path.expanduser('~/.gdb_history')

def main(): 
    """
    Application to wrap the execution of the gdb debugger. Execute it normally
    and record its invocation.
    """
    
    global dataDir
    global dataFile
    global gdbHistoryFile

    pla.logMessage("gdb: plaDirectory = " + pla.plaDirectory)
    pla.logMessage("gdb: DataFile = " + dataFile)

    # Modify the first argument to point to the true executable
    sys.argv[0] = '/usr/bin/gdb'

    # Execute the given gdb command regularly
    dateBegin = str(datetime.datetime.now())[:-7]
    try:
        pla.logMessage('gdb: executing ' + str(sys.argv))
        givenCmd = subprocess.Popen(sys.argv)
    except OSError, e:		  
        print 'File not found (PLA)'
        sys.exit(0)
    except ValueError, e:
        print 'Incorrect arguments (PLA)'
        sys.exit(0)
        
    # Wait for the process to terminate and get the output/error
    (gdbOutput, gdbError) = givenCmd.communicate()

    # Store the return status to return when the script finishes.
    originalStatus = givenCmd.returncode
    pla.logMessage('gdb: command status = ' + str(originalStatus))

    # If no file is present in pladirectory, no instrumentation
    if not os.path.exists(dataDir):
        pla.logMessage("gdb: Disabled. Skipping")
        sys.exit(originalStatus)

    # If file is present in pladirectory, begin instrumentation
    if os.path.exists(dataDir):
        gdbDataOut = open(dataFile, 'a')
        gdbDataOut.write('-BEGIN ' \
                             + dateBegin + ' ' \
                             + str(datetime.datetime.now())[:-7] \
                             + ' ' + ' '.join(sys.argv) + '\n')

    # If history file is not there, nothing else to do
    if not os.path.exists(gdbHistoryFile):
        pla.logMessage('gdb: No ~/.gdb_history file. Misconfig?')
        gdbDataOut.close()
        sys.exit(originalStatus)

    # Transfer content of history file to data file
    gdbHistoryData = open(gdbHistoryFile, 'r')
    for line in gdbHistoryData:
        gdbDataOut.write(line)

    gdbDataOut.write('-END\n')

    # Close files
    gdbHistoryData.close()
    gdbDataOut.close()
    
    # Reset the history file
    gdbHistoryData = open(gdbHistoryFile, 'w')
    gdbHistoryData.close()

    # And terminate gracefully with the status generated by the original SVN
    sys.exit(originalStatus)

if __name__ == "__main__":
    main()
